import ccxt
import os
from dotenv import load_dotenv
import time
load_dotenv()
api_key = os.getenv("5huWOQsBrwBCFPTL6YBPxzpV0pCZHx5nd9qDm9MB5CHngY2OCglQmlDlsqBBE0VV")
api_secret = os.getenv("0uaiZXnDF5S1k17kz3DPRla4XSisTVYHZ7qvuQ9Bb4WVwsDhNdbv2Pad6xzXAuc0")
symbol = "XRP/EUR"
min_budget_eur = 100  # Mindestbudget
buy_ratio = 0.9       # 90 % von EUR verwenden
# Binance-Setup
exchange = ccxt.binance({
   'apiKey': api_key,
   'secret': api_secret,
   'enableRateLimit': True,
})
exchange.options['defaultType'] = 'spot'
def get_balance(asset):
   balance = exchange.fetch_balance()
   return balance[asset]['free']
def get_price():
   ticker = exchange.fetch_ticker(symbol)
   return ticker['ask']
def buy_xrp():
   eur_balance = get_balance('EUR')
   print(f"EUR verf√ºgbar: {eur_balance:.2f} EUR")
   if eur_balance < min_budget_eur:
       print("‚ö†Ô∏è Nicht genug EUR. Kein Kauf.")
       return
   price = get_price()
   amount_to_spend = eur_balance * buy_ratio
   xrp_amount = round(amount_to_spend / price, 1)  # XRP erlaubt 1 Dezimalstelle
   print(f"‚úÖ Kaufe {xrp_amount} XRP bei {price:.4f} EUR/XRP")
   order = exchange.create_market_buy_order(symbol, xrp_amount)
   print("üü¢ Kauf abgeschlossen:", order)
def sell_xrp():
   xrp_balance = get_balance('XRP')
   if xrp_balance < 1:
       print("‚ö†Ô∏è Zu wenig XRP zum Verkaufen.")
       return
   xrp_to_sell = round(xrp_balance, 1)
   print(f"‚úÖ Verkaufe {xrp_to_sell} XRP")
   order = exchange.create_market_sell_order(symbol, xrp_to_sell)
   print("üî¥ Verkauf abgeschlossen:", order)
# -------------------------------
# Beispielsteuerung
# Du kannst das nach deinem Entry-/Exit-Signal aufrufen
# -------------------------------
# Beispiel: Entry-Signal erkannt
print("üìà Entry-Signal erkannt!")
buy_xrp()
time.sleep(10)  # nur als Beispiel ‚Äì z.‚ÄØB. warten auf Exit-Bedingung
# Beispiel: Exit-Signal erkannt
print("üìâ Exit-Signal erkannt!")
sell_xrp()
